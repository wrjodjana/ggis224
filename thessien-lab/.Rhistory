knitr::opts_chunk$set(echo = TRUE)
LAcrime <- fread("LA-data/LAPD2015_Violent.csv")
library(sf)
library(tmap)
library(leaflet)
library(data.table)
library(tidyverse)
LAcrime <- fread("LA-data/LAPD2015_Violent.csv")
NYCcrime <- fread("NYC-data/NYPD2015_Violent.csv")
setwd("~/Documents/R/ggis-224/assignment-3")
head(NYCcrime)
head(NYCcrime)
NYCcrime
LAcrime.df <- as.data.frame(LAcrime)
s1 <- subset(LAcrime.df, LAcrime.df$`Crime Code Description`=="CRIMINAL HOMICIDE") # base r subset
LAcrime.hom <- rbind(s1)
head(s1)
unique(LAcrime$`Crime Code Description`)
LAcrime <- fread("LA-data/LAPD2015_Violent.csv")
NYcrime <- fread("NYC-data/NYPD2015_Violent.csv")
unique(NYcrime$`Crime Code Description`)
unique(NYcrime$`Crime Code Description`)
head(NYcrime)
LAcrime <- fread("LA-data/LAPD2015_Violent.csv")
NYcrime <- fread("NYC-data/NYPD2015_Violent.csv")
head(LAcrime)
NYcrime <- fread("NYC-data/NYPD2015_Violent.csv")
head(NYcrime)
NYcrime <- fread("NYC-data/NYPD2015_Violent.csv")
head(NYcrime)
unique(NYcrime$`OFNS_DESC`)
unique(NYcrime$`PD_DESC`)
unique(NYcrime$`OFNS_DESC`)
NYcrime.df <- as.data.frame(NYcrime)
NYcrime.hom <- NYcrime.df %>%
filter(`OFNS_DESC` == "HOMICIDE-NEGLIGENT-VEHICLE")
NYcrime.df <- as.data.frame(NYcrime)
NYcrime.hom <- NYcrime.df %>%
filter(`OFNS_DESC` == "HOMICIDE-NEGLIGENT-VEHICLE" && `OFNS_DESC` == "MURDER & NON-NEGL. MANSLAUGHTER")
NYcrime.df <- as.data.frame(NYcrime)
NYcrime.hom <- NYcrime.df %>%
filter(`OFNS_DESC` == "HOMICIDE-NEGLIGENT-VEHICLE" | `OFNS_DESC` == "MURDER & NON-NEGL. MANSLAUGHTER")
NYcrime.df <- as.data.frame(NYcrime)
NYcrime.hom <- NYcrime.df %>%
filter(`OFNS_DESC` == "HOMICIDE-NEGLIGENT-VEHICLE" | `OFNS_DESC` == "MURDER & NON-NEGL. MANSLAUGHTER")
head(NYcrime.hom)
NYcrime.hom <- NYcrime %>%
filter(`OFNS_DESC` == "HOMICIDE-NEGLIGENT-VEHICLE" | `OFNS_DESC` == "MURDER & NON-NEGL. MANSLAUGHTER")
head(NYcrime.hom)
NYcrime.hom <- NYcrime %>%
filter(`OFNS_DESC` == "HOMICIDE-NEGLIGENT-VEHICLE" | `OFNS_DESC` == "MURDER & NON-NEGL. MANSLAUGHTER")
head(NYcrime.hom)
write.csv(NYcrime.hom, "NYcrime_hom.csv")
write.csv(NYcrime.hom, "NYcrime_hom.csv")
glimpse(NYcrime.hom[,c("longitude","latitude")])
glimpse(NYcrime.hom[,c("Longitude","Latitude")])
str(NYcrime.hom[,c("Longitude", "Latitude")])
str(NYcrime.hom[,c("Longitude", "Latitude")])
NYcrime.hom$Latitude <- as.numeric(NYcrime.hom$Latitude)
NYcrime.hom$Longitude <- as.numeric(NYcrime.hom$Longitude)
str(NYcrime.hom[,c("Longitude", "Latitude")])
NYcrime.hom$Latitude <- as.numeric(NYcrime.hom$Latitude)
NYcrime.hom$Longitude <- as.numeric(NYcrime.hom$Longitude)
NYcrime.pts <- st_as_sf(NYcrime.hom, coords = c("Longitude","Latitude"), crs = 4326)
NYcrime.hom.na <- subset(NYcrime.hom, is.na(NYcrime.hom[,c("Longitude", "Latitude")]))
NYcrime.pts <- st_as_sf(NYcrime.hom, coords = c("Longitude","Latitude"), crs = 4326)
plot(NYcrime.pts)
NYcrime.hom2 <- na.omit(NYcrime.hom[,c("DR Number","longitude", "latitude")])
NYcrime.hom2 <- na.omit(NYcrime.hom[,c("CMPLNT_NUM","Longitude", "Latitude")])
str(NYcrime.hom2)
NYcrime.pts <- st_as_sf(NYcrime.hom2, coords = c("Longitude","Latitude"), crs = 4326)
plot(NYcrime.pts)
LAcrime.hom2 <- LAcrime.hom[complete.cases(LAcrime.hom$longitude, LAcrime.hom$latitude), ]
str(NYcrime.hom2)
NYcrime.hom2 <- NYcrime.hom[complete.cases(NYcrime.hom$Longitude, NYcrime.hom$Latitude), ]
str(NYcrime.hom2)
NYcrime.pts <- st_as_sf(NYcrime.hom2, coords = c("Longitude","Latitude"), crs = 4326)
plot(NYcrime.pts)
NYcrime.hom2 <- NYcrime.hom[complete.cases(NYcrime.hom$Longitude, NYcrime.hom$Latitude, NYcrime.hom$CMPLNT_NUM), ]
str(NYcrime.hom2)
NYcrime.pts <- st_as_sf(NYcrime.hom2, coords = c("Longitude","Latitude"), crs = 4326)
plot(NYcrime.pts)
NYcrime.hom2 <- na.omit(NYcrime.hom[,c("CMPLNT_NUM","Longitude", "Latitude")])
str(NYcrime.hom2)
NYcrime.pts <- st_as_sf(NYcrime.hom2, coords = c("Longitude","Latitude"), crs = 4326)
plot(NYcrime.pts)
NYcrimes <- NYcrime.pts
NYtracts <- st_read("NY-data/NYC_Shape.shp")
NYcrimes <- NYcrime.pts
NYtracts <- st_read("NYC-data/NYC_Shape.shp")
## 1st layer (gets plotted first)
tm_shape(NYtracts) + tm_borders(alpha = 0.4) +
## 2nd layer (overlay)
tm_shape(NYcrime.pts) + tm_dots(size = 0.1, col="blue")
CRS.new <- st_crs(NYtracts)
NYcrimes <- st_transform(NYcrimes, CRS.new)
## 1st layer (gets plotted first)
tm_shape(NYtracts) + tm_borders(alpha = 0.4) +
## 2nd layer (overlay)
tm_shape(NYcrime.pts) + tm_dots(size = 0.1, col="blue")
crime_in_tractNY <- st_join(NYcrimes, NYtracts, join = st_within)
glimpse(crime_in_tractNY)
crime_tract_countNY <- as.data.frame(table(crime_in_tractNY$TRACTCE10))
glimpse(crime_tract_countNY)
crime_in_tract <- st_join(LAcrimes, LAtracts, join = st_within)
CRS.new <- st_crs(LAtracts)
write.csv(LAcrime.hom,"LAcrime_hom.csv")
glimpse(LAcrime.hom[,c("longitude","latitude")])
str(LAcrime.hom[,c("longitude", "latitude")])
LAcrime.hom$latitude <- as.numeric(LAcrime.hom$latitude)
LAcrime.hom$longitude <- as.numeric(LAcrime.hom$longitude)
LAcrime.hom.na <- subset(LAcrime.hom, is.na(LAcrime.hom[,c("longitude", "latitude")]))
glimpse(LAcrime.hom.na) # observations
LAcrime.hom2 <- na.omit(LAcrime.hom[,c("DR Number","longitude", "latitude")])
str(LAcrime.hom2)
LAcrime.pts <- st_as_sf(LAcrime.hom2, coords = c("longitude","latitude"), crs = 4326)
plot(LAcrime.pts)
LAcrimes <- LAcrime.pts
LAtracts <- st_read("LA-data/LAC_Shape.shp")
## 1st layer (gets plotted first)
tm_shape(LAtracts) + tm_borders(alpha = 0.4) +
## 2nd layer (overlay)
tm_shape(LAcrime.pts) + tm_dots(size = 0.1, col="red")
CRS.new <- st_crs(LAtracts)
LAcrimes <- st_transform(LAcrimes, CRS.new)
crime_in_tract <- st_join(LAcrimes, LAtracts, join = st_within)
glimpse(crime_in_tract)
crime_tract_countNY <- as.data.frame(table(crime_in_tractNY$tractce))
glimpse(crime_tract_countNY)
crime_tract_count <- as.data.frame(table(crime_in_tract$TRACTCE10))
glimpse(crime_tract_count)
names(crime_tract_count) <- c("tractce","CrimeCt")
glimpse(crime_tract_count)
names(crime_tract_count) <- c("TRACTCE10","CrimeCt")
glimpse(crime_tract_count)
NYtracts_new <- merge(NYtracts, crime_tract_countNY, by="tractce")
crime_tract_countNY <- as.data.frame(table(crime_in_tractNY$tractce))
glimpse(crime_tract_countNY)
LAtracts_new <- merge(LAtracts, crime_tract_count, by="TRACTCE10")
glimpse(LAtracts_new)
NYtracts_new <- merge(NYtracts, crime_tract_countNY, by="tractce")
NYtracts_new <- merge(NYtracts, crime_tract_countNY, by="tractce")
NYtracts_new <- merge(NYtracts, crime_tract_countNY, by="tractce")
names(crime_tract_countNY) <- c("tractce","CrimeCt")
glimpse(crime_tract_countNY)
NYtracts_new <- merge(NYtracts, crime_tract_countNY, by="tractce")
glimpse(NYtracts_new)
tmap_mode("view")
tm_shape(NYtracts_new) + tm_fill("CrimeCt", n=4, pal = "BuPu", title="NY Homicides in 2015")
# set libraries
library(sf)
library(data.table)
library(raster)
library(rgeos)
install.packages("rgeos")
install.packages("classInt")
install.packages("classInt")
library(sf)
library(data.table)
library(raster)
library(terra)
library(tmap)
library(classInt)
polygons <- st_read("cb_2019_us_county_500k.shp")
setwd("~/Documents/GitHub/ggis224/thessien-lab")
polygons <- st_read("cb_2019_us_county_500k.shp")
alameda_county <- polygons[polygons$STATEFP=='06'& polygons$COUNTYFP=='001',]
plot(alameda_county)
plot(alameda_county$geometry)
polygons <- st_read("cb_2019_us_county_500k.shp")
alameda <- polygons[polygons$STATEFP=='06'& polygons$COUNTYFP=='001',]
plot(alameda_county$geometry)
tr_alameda <- st_transform(alameda, crs=3310)
# California Hospital Facility Points
points <- read.csv("current-healthcare-facility-listing.csv")
nrow(points)
points <- points %>%
filter(TOTAL_NUMBER_BEDS > 1)
head(points)
nrow(points)
points <- points %>%
filter(TOTAL_NUMBER_BEDS > 1)
# Keep facilities with only hospital beds
nrow(points)
points_new <- points %>%
filter(TOTAL_NUMBER_BEDS > 1)
library(dplyr)
points_new <- points %>%
filter(TOTAL_NUMBER_BEDS > 1)
points_new <- points %>%
filter(TOTAL_NUMBER_BEDS > 1 && LICENSE_CATEGORY_DESC=="General Acute Care Hospital")
points_new <- points %>%
filter(TOTAL_NUMBER_BEDS > 1 & LICENSE_CATEGORY_DESC=="General Acute Care Hospital")
points <- points %>%
filter(TOTAL_NUMBER_BEDS > 1 & LICENSE_CATEGORY_DESC=="General Acute Care Hospital")
# Convert to Data Spatial Points
points <- st_as_sf(pts_df, coords = c('LONGITUDE', 'LATITUDE'), crs = 4326)
# Convert to Data Spatial Points
points <- st_as_sf(points_df, coords = c('LONGITUDE', 'LATITUDE'), crs = 4326)
# Convert to Data Spatial Points
points <- st_as_sf(points_df, coords = c('LONGITUDE', 'LATITUDE'), crs = 4326)
# Keep facilities with only hospital beds
points_df <- points %>%
filter(TOTAL_NUMBER_BEDS > 1 & LICENSE_CATEGORY_DESC=="General Acute Care Hospital")
# Convert to Data Spatial Points
points <- st_as_sf(points_df, coords = c('LONGITUDE', 'LATITUDE'), crs = 4326)
plot(points$geometry)
# Convert to Data Spatial Points
points_new <- st_as_sf(points_df, coords = c('LONGITUDE', 'LATITUDE'), crs = 4326)
plot(points_new$geometry)
is_points <- st_intersection(tr_points, tr_alameda)
points_new <- st_as_sf(points_df, coords = c('LONGITUDE', 'LATITUDE'), crs = 4326)
tr_points <- st_transform(points_new, crs=3310)
is_points <- st_intersection(tr_points, tr_alameda)
ptsply <- st_intersection(tr_points, tr_alameda)
# transform data
ply <- st_transform(alameda, crs=3310)
plot(ply$geometry)
plot(ptsply$geometry, add=T)
voronoi <-
ptsply %>%
st_geometry() %>%
st_union() %>%
st_voronoi() %>%
st_collection_extract()
# Putback in original order so can easily join with source attributes
voronoi <- voronoi[unlist(st_intersects(my_pts,voronoi))]
# Plot the point voronoi polygons
plot(voronoi)
# clip the voronoi polys to the boundary
voronoi2 <- st_intersection(my_poly$geometry, voronoi)
# Voronoi Diagram
voronoi <-
ptsply %>%
st_geometry() %>%
st_union() %>%
st_voronoi() %>%
st_collection_extract()
# Putback in original order so can easily join with source attributes
voronoi <- voronoi[unlist(st_intersects(ptsply,voronoi))]
# Plot the point voronoi polygons
plot(voronoi)
# clip the voronoi polys to the boundary
voronoi2 <- st_intersection(ply$geometry, voronoi)
# plot the clipped voronoi polygons
plot(voronoi2)
plot(my_pts$geometry, add=T, col="red", pch=20)
# Voronoi Diagram
voronoi <-
ptsply %>%
st_geometry() %>%
st_union() %>%
st_voronoi() %>%
st_collection_extract()
# Putback in original order so can easily join with source attributes
voronoi <- voronoi[unlist(st_intersects(ptsply,voronoi))]
# Plot the point voronoi polygons
plot(voronoi)
# clip the voronoi polys to the boundary
voronoi2 <- st_intersection(ply$geometry, voronoi)
# plot the clipped voronoi polygons
plot(voronoi2)
plot(ptsply$geometry, add=T, col="red", pch=20)
# Make the voronoi polygon data an sf object that has the voronoi geometry but the input attributes
voronoi_sf = st_sf(ptsply, geometry = voronoi2)    # sf object
st_set_crs(voronoi_sf, my_crs_code)
plot(voronoi_sf$geometry)
plot(ptsply$geometry, add=T, col="red", pch=20)
title("Voronoi Diagram to model Hospitals in Alameda County")
plot(voronoi_sf$geometry)
plot(ptsply$geometry, add=T, col="red", pch=20)
title("Voronoi Diagram to model Hospitals in Alameda County")
legend("topright", # Places the legend in the top right corner of the plot
legend="Points", # The text for the legend
col="red", # The color for the points
pch=20) # The point character (shape) used in the plot
# Assuming my_pts is an sf object
tm_shape(ptsply) +
tm_dots(col = "red", size = 0.5) + # add points with tm_dots; adjust size as needed
tm_layout(title = "Map Title") # add a title with tm_layout
plot(voronoi_sf$geometry)
plot(ptsply$geometry, add=T, col="red", pch=20)
title("Voronoi Diagram to model Hospitals in Alameda County")
legend("topright",
legend="Points",
col="red",
pch=20)
plot(voronoi_sf$geometry)
plot(ptsply$geometry, add=T, col="red", pch=20)
title("Voronoi Diagram to model proximity to hospitals in CA")
legend("topright",
legend="Points",
col="red",
pch=20)
plot(voronoi_sf$geometry)
plot(ptsply$geometry, add=T, col="red", pch=20)
title(main="Voronoi Diagram to model proximity to hospitals in CA", line=-1)
legend("topright", legend="Points", col="red", pch=20)
title(main="Voronoi Diagram to model proximity to hospitals in CA", line=1)
legend("topright", legend="Points", col="red", pch=20)
plot(voronoi_sf$geometry)
plot(ptsply$geometry, add=T, col="red", pch=20)
title(main="Voronoi Diagram to model proximity to hospitals in CA", line=1)
legend("topright", legend="Points", col="red", pch=20)
plot(voronoi_sf$geometry)
plot(ptsply$geometry, add=T, col="red", pch=20)
title(main="Voronoi Diagram to model proximity to hospitals in CA", line=1)
legend("topright", legend="Points", col="red", pch=20, bty="n")
plot(voronoi_sf$geometry)
plot(ptsply$geometry, add=T, col="red", pch=20)
mtext("Voronoi Diagram to model proximity to hospitals in CA", side=3, line=1, adj=0)
legend("topright", legend="Points", col="red", pch=20, bty="n")
plot(voronoi_sf$geometry)
plot(ptsply$geometry, add=T, col="red", pch=20)
mtext("Voronoi Diagram to model proximity to hospitals in CA", side=3, line=1, adj=0, font=2)
legend("topright", legend="Points", col="red", pch=20, bty="n")
plot(ply$geometry)
plot(ptsply$geometry, add=T)
