kde_result <- density.ppp(traffic_ppp, sigma = 500)
kde_raster <- raster(kde_result)
# load libraries
library(raster)
library(sf)
library(dplyr)
library(terra)
library(tmap)
library(data.table)
library(tidyverse)
library(sp)
library(spatstat)
# load data
traffic <- read_csv("traffic.csv", show_col_types = FALSE)
boundary <- st_read("boundaries.geojson")
# convert traffic data spatially
traffic_sf <- st_as_sf(traffic, coords = c("Longitude", "Latitude"), crs = 4326)
# ensure both are the same CRS
boundary <- st_transform(boundary, st_crs(traffic_sf))
# filter useless stuff
boundary <- boundary %>%
select(-area, -perimeter, -comarea_id, -comarea)
# Basic plot of traffic data on the boundary map
tmap_mode("view")
chitraffic <- tm_shape(boundary) + tm_borders(alpha = 0.4) +
tm_shape(traffic_sf) + tm_dots(size = 0.01, col="black") +
tm_layout(title="Average Daily Traffic Count in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
chitraffic
traffic_sf <- traffic_sf %>%
st_intersection(boundary)
traffic_sf <- traffic_sf %>%
separate(Location, into = c("Latitude", "Longitude"), sep = ",")
traffic_sf$Latitude <- as.numeric(traffic_sf$Latitude)
traffic_sf$Longitude <- as.numeric(traffic_sf$Longitude)
traffic_sf$Latitude <- as.numeric(gsub("[()]", "", traffic_sf$Latitude))
traffic_sf$Longitude <- as.numeric(gsub("[()]", "", traffic_sf$Longitude))
traffic_sf <- st_transform(traffic_sf, crs = 3435)
boundary <- st_transform(boundary, crs = st_crs(traffic_sf))
traffic_ppp <- as.ppp(traffic_sf)
boundary_owin <- as.owin(boundary)
traffic_ppp <- ppp(x = traffic_sf$Longitude, y = traffic_sf$Latitude,
window = boundary_owin)
kde_result <- density.ppp(traffic_ppp, sigma = 500)
kde_raster <- raster(kde_result)
crs(traffic_sf)
crs(kde_raster) <- crs(traffic_sf)
# Adding KDE layer to the map
tmap_mode("view")
tm_shape(kde_raster) +
tm_raster(alpha = 0.5, palette = "-RdYlBu") +
tm_layout(title = "Kernel Density Estimate of Traffic in Chicago")
# load libraries
library(raster)
library(sf)
library(dplyr)
library(terra)
library(tmap)
library(data.table)
library(tidyverse)
library(sp)
library(spatstat)
# load data
traffic <- read_csv("traffic.csv", show_col_types = FALSE)
boundary <- st_read("boundaries.geojson")
# convert traffic data spatially
traffic <- st_as_sf(traffic, coords = c("Longitude", "Latitude"), crs = 4326)
# ensure both are the same CRS
boundary <- st_transform(boundary, st_crs(traffic_sf))
# filter unimportant columns
boundary <- boundary %>%
select(-area, -perimeter, -comarea_id, -comarea)
# Basic plot of traffic data on the boundary map
chitraffic <- tm_shape(boundary) + tm_borders(alpha = 0.4) +
tm_shape(traffic) + tm_dots(size = 0.01, col="black", title="average traffic") +
tm_layout(title="Average Daily Traffic Count in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
chitraffic
tm_shape(boundary) + tm_borders() +
tm_shape(traffic) + tm_dots(col="Total Passing Vehicle Volume", size = 0.1 , title="total passing vehicles")
tm_shape(boundary) + tm_borders() +
tm_shape(traffic) + tm_dots(col="Total Passing Vehicle Volume", size = 0.1 , palette="-Blues", n = 8, title="total passing vehicles")
tmap_mode("view")
tm_shape(boundary) + tm_borders() +
tm_shape(traffic) + tm_dots(col="Total Passing Vehicle Volume", size = 0.1 , palette="-Blues", n = 8, title="total passing vehicles")
tmap_mode("view")
tm_shape(boundary) + tm_borders() +
tm_shape(traffic) + tm_dots(col="Total Passing Vehicle Volume", size = 0.1 , palette="Red-Blue", n = 8, title="total passing vehicles")
tmap_mode("view")
tm_shape(boundary) + tm_borders() +
tm_shape(traffic) + tm_dots(col="Total Passing Vehicle Volume", size = 0.1 , palette="-Blues", n = 8, title="total passing vehicles")
tmap_mode("view")
tm_shape(boundary) + tm_borders() +
tm_shape(traffic) + tm_dots(col="Total Passing Vehicle Volume", size = 0.1 , palette="-Blues", n = 7, title="total passing vehicles")
tmap_mode("view")
tm_shape(boundary) + tm_borders() +
tm_shape(traffic) + tm_dots(col="Total Passing Vehicle Volume", size = 0.1 , palette="Blues", n = 7, title="total passing vehicles")
tmap_mode("view")
tm_shape(boundary) + tm_borders() +
tm_shape(traffic) + tm_dots(col="Total Passing Vehicle Volume", size = 0.1 , palette="Blues", n = 5, title="total passing vehicles")
tmap_mode("view")
tm_shape(boundary) + tm_borders() +
tm_shape(traffic) + tm_dots(col="Total Passing Vehicle Volume", size = 0.1 , palette="Blues", n = 6, title="total passing vehicles")
# Basic plot of traffic data on the boundary map
tmap_mode("view")
chitraffic <- tm_shape(boundary) + tm_borders(alpha = 0.4) +
tm_shape(traffic) + tm_dots(size = 0.01, col="black", title="average traffic") +
tm_layout(title="Average Daily Traffic Count in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
chitraffic
# plot total passing vehicle volume on boundaries
tm_shape(boundary) + tm_borders() +
tm_shape(traffic) + tm_dots(col="Total Passing Vehicle Volume", size = 0.1 , palette="Blues", n = 6, title="total passing vehicles")
tmp.vgm <- variogram(traffic$`Total Passing Vehicle Volume` ~ 1, node.temps)
# load libraries
library(raster)
library(sf)
library(dplyr)
library(terra)
library(tmap)
library(data.table)
library(tidyverse)
library(sp)
library(spatstat)
library(gstat)
install.packages("gstat")
# load libraries
library(raster)
library(sf)
library(dplyr)
library(terra)
library(tmap)
library(data.table)
library(tidyverse)
library(sp)
library(spatstat)
library(gstat)
tmp.vgm <- variogram(traffic$`Total Passing Vehicle Volume` ~ 1, node.temps)
tmp.vgm <- variogram(traffic$`Total Passing Vehicle Volume` ~ 1, traffic)
plot(tmp.vgm)
tmp.fit.sph<- fit.variogram(tmp.vgm, model=vgm("Sph"))
plot(tmp.vgm, tmp.fit.sph)
pt2grid <- function(ptframe,n) {
bb <- bbox(ptframe)
ptcrs <- proj4string(ptframe)
xrange <- abs(bb[1,1] - bb[1,2])
yrange <- abs(bb[2,1] - bb[2,2])
cs <- c(xrange/n,yrange/n)
cc <- bb[,1] + (cs/2)
dc <- c(n,n)
x1 <- GridTopology(cellcentre.offset=cc,cellsize=cs,cells.dim=dc)
x2 <- SpatialGrid(grid=x1,proj4string=CRS(ptcrs))
return(x2)
}
chi.grid <- pt2grid((chiCA),30)
chi.grid <- pt2grid((boundary),30)
chiCA <- readOGR(".", "ChiComArea")
boundary
# load libraries
library(raster)
library(sf)
library(dplyr)
library(terra)
library(tmap)
library(data.table)
library(tidyverse)
library(sp)
library(spatstat)
library(gstat)
# load data
traffic <- read_csv("traffic.csv", show_col_types = FALSE)
boundary <- st_read("boundaries.geojson")
# load data
traffic <- read_csv("traffic.csv", show_col_types = FALSE)
boundary <- st_read("boundaries.geojson")
# convert traffic data spatially
traffic <- st_as_sf(traffic, coords = c("Longitude", "Latitude"), crs = 4326)
# ensure both are the same CRS
boundary <- st_transform(boundary, st_crs(traffic_sf))
# Basic plot of traffic data on the boundary map
tmap_mode("view")
chitraffic <- tm_shape(boundary) + tm_borders(alpha = 0.4) +
tm_shape(traffic) + tm_dots(size = 0.01, col="black", title="average traffic") +
tm_layout(title="Average Daily Traffic Count in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
chitraffic
# plot total passing vehicle volume on boundaries
tm_shape(boundary) + tm_borders() +
tm_shape(traffic) + tm_dots(col="Total Passing Vehicle Volume", size = 0.1 , palette="Blues", n = 6, title="total passing vehicles")
tmp.vgm <- variogram(traffic$`Total Passing Vehicle Volume` ~ 1, traffic)
plot(tmp.vgm)
tmp.fit.sph<- fit.variogram(tmp.vgm, model=vgm("Sph"))
plot(tmp.vgm, tmp.fit.sph)
pt2grid <- function(ptframe,n) {
bb <- bbox(ptframe)
ptcrs <- proj4string(ptframe)
xrange <- abs(bb[1,1] - bb[1,2])
yrange <- abs(bb[2,1] - bb[2,2])
cs <- c(xrange/n,yrange/n)
cc <- bb[,1] + (cs/2)
dc <- c(n,n)
x1 <- GridTopology(cellcentre.offset=cc,cellsize=cs,cells.dim=dc)
x2 <- SpatialGrid(grid=x1,proj4string=CRS(ptcrs))
return(x2)
}
boundary
chiCA <- readOGR(".","ChiComArea")
install.packages("rgdal")
chi.grid <- pt2grid((boundary),30)
boundary
traffic.ppp <- as(traffic, "ppp") # convert sf object to ppp
# Extract coordinates from the sf object
coords <- st_coordinates(traffic)
# Define the observation window (bounding box) using the boundary data
# Assuming 'boundary' is in the same CRS as 'traffic'
bbox <- st_bbox(boundary)
window <- owin(xrange = bbox[c("xmin", "xmax")], yrange = bbox[c("ymin", "ymax")])
# Create a ppp object
traffic.ppp <- ppp(coords[,1], coords[,2], window = window)
kde <- density(traffic.ppp)
# converting kde back to raster for plotting
kde_raster <- raster(kde)
# Plotting the KDE with boundary
final_map <- tm_shape(boundary) + tm_borders() +
tm_shape(kde_raster) +
tm_raster(title="Traffic Density", style="cont", palette="-Blues") +
tm_layout(title="Traffic Density in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
final_map
crs_traffic <- st_crs(traffic)
crs_boundary <- st_crs(boundary)
View(crs_traffic)
View(crs_boundary)
# convert traffic data spatially
traffic <- st_as_sf(traffic, coords = c("Longitude", "Latitude"), crs = 4326)
# ensure both are the same CRS
boundary <- st_transform(boundary, crs = 4326)
crs_traffic <- st_crs(traffic)
crs_boundary <- st_crs(boundary)
View(crs_boundary)
# Extract coordinates from the sf object
coords <- st_coordinates(traffic)
# Define the observation window (bounding box) using the boundary data
# Assuming 'boundary' is in the same CRS as 'traffic'
bbox <- st_bbox(boundary)
window <- owin(xrange = bbox[c("xmin", "xmax")], yrange = bbox[c("ymin", "ymax")])
# Create a ppp object
traffic.ppp <- ppp(coords[,1], coords[,2], window = window)
kde <- density(traffic.ppp)
# converting kde back to raster for plotting
kde_raster <- raster(kde)
# Plotting the KDE with boundary
final_map <- tm_shape(boundary) + tm_borders() +
tm_shape(kde_raster) +
tm_raster(title="Traffic Density", style="cont", palette="-Blues") +
tm_layout(title="Traffic Density in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
final_map
# Plotting the KDE with boundary
final_map <- tm_shape(boundary) + tm_borders() +
tm_shape(kde_raster) +
tm_raster(title="Traffic Density", style="cont", palette="Blues") +
tm_layout(title="Traffic Density in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
final_map
coords <- st_coordinates(traffic)
bbox <- st_bbox(boundary)
window <- owin(xrange = bbox[c("xmin", "xmax")], yrange = bbox[c("ymin", "ymax")])
traffic.ppp <- ppp(coords[,1], coords[,2], window = window)
kde <- density(traffic.ppp)
# converting kde back to raster for plotting
kde_raster <- raster(kde)
# Plotting the KDE with boundary
final_map <- tm_shape(boundary) + tm_borders() +
tm_shape(kde_raster) +
tm_raster(title="Traffic Density", style="cont", palette="Blues") +
tm_layout(title="Traffic Density in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
final_map
# load libraries
library(raster)
library(sf)
library(dplyr)
library(terra)
library(tmap)
library(data.table)
library(tidyverse)
library(sp)
library(spatstat)
library(gstat)
# load data
traffic <- read_csv("traffic.csv", show_col_types = FALSE)
boundary <- st_read("boundaries.geojson")
# convert traffic data spatially
traffic <- st_as_sf(traffic, coords = c("Longitude", "Latitude"), crs = 4326)
# ensure both are the same CRS
boundary <- st_transform(boundary, crs = 4326)
# Basic plot of traffic data on the boundary map
tmap_mode("view")
chitraffic <- tm_shape(boundary) + tm_borders(alpha = 0.4) +
tm_shape(traffic) + tm_dots(size = 0.01, col="black", title="average traffic") +
tm_layout(title="Average Daily Traffic Count in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
chitraffic
# plot total passing vehicle volume on boundaries
tm_shape(boundary) + tm_borders() +
tm_shape(traffic) + tm_dots(col="Total Passing Vehicle Volume", size = 0.1 , palette="Blues", n = 6, title="total passing vehicles")
coords <- st_coordinates(traffic)
bbox <- st_bbox(boundary)
window <- owin(xrange = bbox[c("xmin", "xmax")], yrange = bbox[c("ymin", "ymax")])
traffic.ppp <- ppp(coords[,1], coords[,2], window = window)
# Aggregating duplicate points, for example by averaging
traffic_aggregated <- traffic %>%
group_by(Longitude, Latitude) %>%
summarise(Average_Traffic = mean(Traffic_Count))
View(traffic)
coords <- st_coordinates(traffic)
bbox <- st_bbox(boundary)
window <- owin(xrange = bbox[c("xmin", "xmax")], yrange = bbox[c("ymin", "ymax")])
traffic.ppp <- ppp(coords[,1], coords[,2], window = window)
kde <- density(traffic.ppp)
# converting kde back to raster for plotting
kde_raster <- raster(kde)
# Plotting the KDE with boundary
final_map <- tm_shape(boundary) + tm_borders() +
tm_shape(kde_raster) +
tm_raster(title="Traffic Density", style="cont", palette="Blues") +
tm_layout(title="Traffic Density in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
final_map
kde <- density(traffic.ppp)
# converting kde back to raster for plotting
kde_raster <- raster(kde)
kde_raster <- projectRaster(kde_raster, crs = 4326)
kde <- density(traffic.ppp)
# converting kde back to raster for plotting
kde_raster <- raster(kde)
kde_raster_masked <- mask(kde_raster, boundary)
# Plotting the KDE with boundary
final_map <- tm_shape(boundary) + tm_borders() +
tm_shape(kde_raster_masked) +
tm_raster(title="Traffic Density", style="cont", palette="Blues") +
tm_layout(title="Traffic Density in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
final_map
# plot total passing vehicle volume on boundaries
chivehicle <- tm_shape(boundary) + tm_borders() +
tm_shape(traffic) + tm_dots(col="Total Passing Vehicle Volume", size = 0.1 , palette="Blues", n = 6, title="total passing vehicles")
# plot total passing vehicle volume on boundaries
chivehicle <- tm_shape(boundary) + tm_borders() +
tm_shape(traffic) + tm_dots(col="Total Passing Vehicle Volume", size = 0.1 , palette="Blues", n = 6, title="total passing vehicles")
chivehicle
# load libraries
library(raster)
library(sf)
library(dplyr)
library(terra)
library(tmap)
library(data.table)
library(tidyverse)
library(sp)
library(spatstat)
library(gstat)
# load data
traffic <- read_csv("traffic.csv", show_col_types = FALSE)
boundary <- st_read("boundaries.geojson")
# convert traffic data spatially
traffic <- st_as_sf(traffic, coords = c("Longitude", "Latitude"), crs = 4326)
# ensure both are the same CRS
boundary <- st_transform(boundary, crs = 4326)
# plot all traffic data on boundaries
tmap_mode("view")
chitraffic <- tm_shape(boundary) + tm_borders(alpha = 0.4) +
tm_shape(traffic) + tm_dots(size = 0.01, col="black", title="average traffic") +
tm_layout(title="Average Daily Traffic Count in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
chitraffic
# plot total passing vehicle volume on boundaries
chivehicle <- tm_shape(boundary) + tm_borders() +
tm_shape(traffic) + tm_dots(col="Total Passing Vehicle Volume", size = 0.1 , palette="Blues", n = 6, title="total passing vehicles")
chivehicle
# extract coordinates from sf object
coords <- st_coordinates(traffic)
# define the observation window (bounding box) using the boundary data
bbox <- st_bbox(boundary)
window <- owin(xrange = bbox[c("xmin", "xmax")], yrange = bbox[c("ymin", "ymax")])
# Create a ppp (two-dimensional point-pattern) object
traffic.ppp <- ppp(coords[,1], coords[,2], window = window)
# perform kernel density estimation
kde <- density(traffic.ppp)
# converting KDE back to raster form
kde_raster <- raster(kde)
# clip the KDE in raster form to chicago boundaries
kde_raster_masked <- mask(kde_raster, boundary)
# plot kde with the chicago boundaries
final_map <- tm_shape(boundary) + tm_borders() +
tm_shape(kde_raster_masked) +
tm_raster(title="Traffic Density", style="cont", palette="Blues") +
tm_layout(title="Traffic Density in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
final_map
# check bandwith
bandwidth_used <- attr(kde, "sigma")
bandwidth_used
# check bandwith
bandwidth_used <- attr(kde, "sigma")
bandwidth_used
str(kde)
# check bandwith and kernel used
str(kde)
# plot kde with the chicago boundaries
final_map <- tm_shape(boundary) + tm_borders() +
tm_shape(kde_raster_masked) +
tm_raster(title="Traffic Density", style="cont", palette="Blues") +
tm_layout(title="Traffic Density in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
final_map
# plot kde with the chicago boundaries
final_map <- tm_shape(boundary) + tm_borders() +
tm_shape(kde_raster_masked) +
tm_raster(title="Traffic Density", style="cont", palette="Blues", n = 6) +
tm_layout(title="Traffic Density in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
final_map
# plot kde with the chicago boundaries
final_map <- tm_shape(boundary) + tm_borders() +
tm_shape(kde_raster_masked) +
tm_raster(title="Traffic Density", style="cont", palette="Blues", n = 1) +
tm_layout(title="Traffic Density in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
final_map
# plot kde with the chicago boundaries
final_map <- tm_shape(boundary) + tm_borders() +
tm_shape(kde_raster_masked) +
tm_raster(title="Traffic Density", style="cont", palette="Blues", n = 2) +
tm_layout(title="Traffic Density in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
final_map
# plot kde with the chicago boundaries
final_map <- tm_shape(boundary) + tm_borders() +
tm_shape(kde_raster_masked) +
tm_raster(title="Traffic Density", style="cont", palette="Blues", n = 3) +
tm_layout(title="Traffic Density in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
final_map
# plot kde with the chicago boundaries
final_map <- tm_shape(boundary) + tm_borders() +
tm_shape(kde_raster_masked) +
tm_raster(title="Traffic Density", style="cont", palette="Blues", n = 6) +
tm_layout(title="Traffic Density in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
final_map
# plot kde with the chicago boundaries
final_map <- tm_shape(boundary) + tm_borders() +
tm_shape(kde_raster_masked) +
tm_raster(title="Traffic Density", style="cont", palette="Blues") +
tm_layout(title="Traffic Density in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
final_map
# plot total passing vehicle volume on boundaries
chivehicle <- tm_shape(boundary) + tm_borders() +
tm_shape(traffic) + tm_dots(col="Total Passing Vehicle Volume", size = 0.1 , palette="Blues", n = 6, title="total passing vehicles") +
tm_scale_bar(position = c("left", "bottom"))
chivehicle
# plot total passing vehicle volume on boundaries
chivehicle <- tm_shape(boundary) + tm_borders() +
tm_shape(traffic) + tm_dots(col="Total Passing Vehicle Volume", size = 0.1 , palette="Blues", n = 6, title="Total Passing Vehicles") +
tm_layout(title="Total Passing Vehicle Volume in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
chivehicle
