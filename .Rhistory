owin_projected <- as.owin(boundary_projected)
# Convert the projected traffic_sf to ppp
traffic_ppp <- as.ppp(st_coordinates(traffic_sf_projected), W = owin_projected)
# Perform Intensity Analysis
traffic_intensity <- density(traffic_ppp, sigma = 0.01)
# Convert the density to a raster
traffic_density_raster <- raster(traffic_intensity)
crs(traffic_density_raster) <- CRS("+init=EPSG:32616")
# Transform the raster back to the original CRS (geographic)
traffic_density_raster_geo <- projectRaster(traffic_density_raster, crs = st_crs(traffic_sf))
# Transform the CRS to a suitable projected system (e.g., UTM)
traffic_sf_projected <- st_transform(traffic_sf, crs = 32616) # UTM zone 16N, change as per your region
boundary_projected <- st_transform(boundary, st_crs(traffic_sf_projected))
# Define the observation window using the transformed boundary
owin_projected <- as.owin(boundary_projected)
# Convert the projected traffic_sf to ppp
traffic_ppp <- as.ppp(st_coordinates(traffic_sf_projected), W = owin_projected)
# Perform Intensity Analysis
traffic_intensity <- density(traffic_ppp, sigma = 0.01)
# Convert the density to a raster
traffic_density_raster <- raster(traffic_intensity)
crs(traffic_density_raster) <- CRS("+init=EPSG:32616")
# Transform the raster back to the original CRS (geographic)
traffic_density_raster_geo <- projectRaster(traffic_density_raster, crs = CRS("+init=EPSG:4326"))
# Convert the raster to an sf object for visualization
traffic_density_sf <- st_as_sf(traffic_density_raster_geo, coords = c("Longitude", "Latitude"), crs = 4326, na.rm = TRUE)
# Transform the CRS to a suitable projected system (e.g., UTM)
traffic_sf_projected <- st_transform(traffic_sf, crs = 32616) # UTM zone 16N, change as per your region
boundary_projected <- st_transform(boundary, st_crs(traffic_sf_projected))
# Define the observation window using the transformed boundary
owin_projected <- as.owin(boundary_projected)
# Convert the projected traffic_sf to ppp
traffic_ppp <- as.ppp(st_coordinates(traffic_sf_projected), W = owin_projected)
# Perform Intensity Analysis
traffic_intensity <- density(traffic_ppp, sigma = 0.01)
# Convert the density to a raster
traffic_density_raster <- raster(traffic_intensity)
crs(traffic_density_raster) <- CRS("+init=EPSG:32616")
# Transform the raster back to the original CRS (geographic)
traffic_density_raster_geo <- projectRaster(traffic_density_raster, crs = CRS("+init=EPSG:4326"))
# Convert the raster to a SpatialPixelsDataFrame
traffic_density_spdf <- as(traffic_density_raster_geo, "SpatialPixelsDataFrame")
# Convert the SpatialPixelsDataFrame to an sf object
traffic_density_sf <- st_as_sf(traffic_density_spdf)
# Convert the raster to an sf object for visualization
traffic_density_sf <- st_as_sf(traffic_density_raster_geo, coords = c("Longitude", "Latitude"), crs = 4326, na.rm = TRUE)
# Transform the CRS to a suitable projected system (e.g., UTM)
traffic_sf_projected <- st_transform(traffic_sf, crs = 32616) # UTM zone 16N, change as per your region
boundary_projected <- st_transform(boundary, st_crs(traffic_sf_projected))
# Define the observation window using the transformed boundary
owin_projected <- as.owin(boundary_projected)
# Convert the projected traffic_sf to ppp
traffic_ppp <- as.ppp(st_coordinates(traffic_sf_projected), W = owin_projected)
# Perform Intensity Analysis
traffic_intensity <- density(traffic_ppp, sigma = 0.01)
# Convert the density to a raster
traffic_density_raster <- raster(traffic_intensity)
crs(traffic_density_raster) <- CRS("+init=EPSG:32616")
# Transform the raster back to the original CRS (geographic)
traffic_density_raster_geo <- projectRaster(traffic_density_raster, crs = CRS("+init=EPSG:4326"))
# Convert the raster to a SpatialPointsDataFrame
traffic_density_spdf <- as(traffic_density_raster_geo, "SpatialPointsDataFrame")
# Convert the SpatialPixelsDataFrame to an sf object
traffic_density_sf <- st_as_sf(traffic_density_spdf)
# Convert the raster to an sf object for visualization
traffic_density_sf <- st_as_sf(traffic_density_raster_geo, coords = c("Longitude", "Latitude"), crs = 4326, na.rm = TRUE)
# Transform the CRS to a suitable projected system (e.g., UTM)
traffic_sf_projected <- st_transform(traffic_sf, crs = 32616) # UTM zone 16N, change as per your region
boundary_projected <- st_transform(boundary, st_crs(traffic_sf_projected))
# Define the observation window using the transformed boundary
owin_projected <- as.owin(boundary_projected)
# Convert the projected traffic_sf to ppp
traffic_ppp <- as.ppp(st_coordinates(traffic_sf_projected), W = owin_projected)
# Perform Intensity Analysis
traffic_intensity <- density(traffic_ppp, sigma = 0.01)
# Convert the density to a raster
traffic_density_raster <- raster(traffic_intensity)
crs(traffic_density_raster) <- CRS("+init=EPSG:32616")
# Transform the raster back to the original CRS (geographic)
traffic_density_raster_geo <- projectRaster(traffic_density_raster, crs = CRS("+init=EPSG:4326"))
# Convert the raster to a SpatialPointsDataFrame
traffic_density_spdf <- as(traffic_density_raster_geo, "SpatialPointsDataFrame")
# Convert the SpatialPixelsDataFrame to an sf object
traffic_density_sf <- st_as_sf(traffic_density_spdf)
# Adjust tmap mode for plotting
tmap_mode("view")
# Create the final map
final_map <- tm_shape(boundary) + tm_borders(alpha = 0.4) +
tm_shape(traffic_density_raster_sf) +
tm_raster("layer", title = "Traffic Density", style = "cont", palette = "-RdYlBu") +
tm_layout(title = "Average Daily Traffic Density in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
# Adjust tmap mode for plotting
tmap_mode("view")
# Create the final map
final_map <- tm_shape(boundary) + tm_borders(alpha = 0.4) +
tm_shape(traffic_density_sf) +
tm_raster("layer", title = "Traffic Density", style = "cont", palette = "-RdYlBu") +
tm_layout(title = "Average Daily Traffic Density in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
final_map
# Adjust tmap mode for plotting
tmap_mode("view")
# Create the final map
final_map <- tm_shape(boundary) + tm_borders(alpha = 0.4) +
tm_shape(traffic_density_sf) +
tm_symbols(col = "layer", title = "Traffic Density", palette = "-RdYlBu") + # Use tm_symbols
tm_layout(title = "Average Daily Traffic Density in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
# Adjust tmap mode for plotting
tmap_mode("view")
# Create the final map
final_map <- tm_shape(boundary) + tm_borders(alpha = 0.4) +
tm_shape(traffic_density_sf) +
tm_symbols(col = "layer", palette = "-RdYlBu") +  # Adjusted tm_symbols
tm_layout(title = "Average Daily Traffic Density in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom")) +
tm_legend(title = "Traffic Density")  # Add legend for traffic density
final_map
# Basic plot of traffic data on the boundary map
tmap_mode("view")
chitraffic <- tm_shape(boundary) + tm_borders(alpha = 0.4) +
tm_shape(traffic_sf) + tm_dots(size = 0.01, col="black") +
tm_layout(title="Average Daily Traffic Count in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
chitraffic
# load libraries
library(raster)
library(sf)
library(dplyr)
library(terra)
library(tmap)
library(data.table)
library(tidyverse)
library(sp)
library(spatstat)
# load data
traffic <- read_csv("traffic.csv", show_col_types = FALSE)
boundary <- st_read("boundaries.geojson")
# convert traffic data spatially
traffic_sf <- st_as_sf(traffic, coords = c("Longitude", "Latitude"), crs = 4326)
# ensure both are the same CRS
boundary <- st_transform(boundary, st_crs(traffic_sf))
# filter useless stuff
boundary <- boundary %>%
select(-area, -perimeter, -comarea_id, -comarea)
traffic_sf <- traffic_sf %>%
st_intersection(boundary)
traffic_ppp <- as.ppp(traffic_sf)
traffic_sf <- st_transform(traffic_sf, crs = 3435)
traffic_sf <- st_transform(traffic_sf, crs = 3435)
boundary <- st_transform(boundary, crs = st_crs(traffic_sf))
traffic_sf <- st_transform(traffic_sf, crs = 3435)
boundary <- st_transform(boundary, crs = st_crs(traffic_sf))
traffic_ppp <- as.ppp(traffic_sf)
traffic_ppp <- as.ppp(traffic_sf)
boundary_owin <- as.owin(boundary)
traffic_ppp <- as.ppp(traffic_sf)
boundary_owin <- as.owin(boundary)
traffic_ppp <- set_window(traffic_ppp, boundary_owin)
View(chitraffic)
View(traffic_sf)
traffic_ppp <- as.ppp(traffic_sf)
boundary_owin <- as.owin(boundary)
traffic_ppp <- ppp(x = traffic_sf$Longitude, y = traffic_sf$Latitude,
window = boundary_owin)
traffic_ppp <- as.ppp(traffic_sf)
boundary_owin <- as.owin(boundary)
traffic_ppp <- ppp(x = traffic_sf$Longitude, y = traffic_sf$Latitude,
window = boundary_owin)
kde_result <- density.ppp(traffic_ppp, sigma = 500)
kde_raster <- raster(kde_result)
# Adding KDE layer to the map
tm_shape(kde_raster) +
tm_raster(alpha = 0.5, palette = "-RdYlBu") +
tm_layout(title = "Kernel Density Estimate of Traffic in Chicago")
# Adding KDE layer to the map
tm_mode("view")
# Adding KDE layer to the map
tmap_mode("view")
tm_shape(kde_raster) +
tm_raster(alpha = 0.5, palette = "-RdYlBu") +
tm_layout(title = "Kernel Density Estimate of Traffic in Chicago")
traffic_ppp <- as.ppp(traffic_sf)
boundary_owin <- as.owin(boundary)
traffic_ppp <- ppp(x = traffic_sf$Longitude, y = traffic_sf$Latitude,
window = boundary_owin)
kde_result <- density.ppp(traffic_ppp, sigma = 500)
kde_raster <- raster(kde_result)
traffic_sf <- st_transform(traffic_sf, crs = 3435)
boundary <- st_transform(boundary, crs = st_crs(traffic_sf))
locations <- strsplit(as.character(traffic_sf$Location), split = ",")
traffic_ppp <- as.ppp(traffic_sf)
boundary_owin <- as.owin(boundary)
traffic_ppp <- ppp(x = sapply(locations, function(x) as.numeric(x[2])),
y = sapply(locations, function(x) as.numeric(x[1])),
window = boundary_owin)
kde_result <- density.ppp(traffic_ppp, sigma = 500)
kde_raster <- raster(kde_result)
# Adding KDE layer to the map
tmap_mode("view")
tm_shape(kde_raster) +
tm_raster(alpha = 0.5, palette = "-RdYlBu") +
tm_layout(title = "Kernel Density Estimate of Traffic in Chicago")
# load libraries
library(raster)
library(sf)
library(dplyr)
library(terra)
library(tmap)
library(data.table)
library(tidyverse)
library(sp)
library(spatstat)
# load data
traffic <- read_csv("traffic.csv", show_col_types = FALSE)
boundary <- st_read("boundaries.geojson")
# convert traffic data spatially
traffic_sf <- st_as_sf(traffic, coords = c("Longitude", "Latitude"), crs = 4326)
# ensure both are the same CRS
boundary <- st_transform(boundary, st_crs(traffic_sf))
# filter useless stuff
boundary <- boundary %>%
select(-area, -perimeter, -comarea_id, -comarea)
# Basic plot of traffic data on the boundary map
tmap_mode("view")
chitraffic <- tm_shape(boundary) + tm_borders(alpha = 0.4) +
tm_shape(traffic_sf) + tm_dots(size = 0.01, col="black") +
tm_layout(title="Average Daily Traffic Count in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
chitraffic
traffic_sf <- traffic_sf %>%
st_intersection(boundary)
traffic_sf <- traffic_sf %>%
separate(Location, into = c("Latitude", "Longitude"), sep = ",")
traffic_sf <- traffic_sf %>%
st_intersection(boundary)
traffic_sf <- traffic_sf %>%
separate(Location, into = c("Latitude", "Longitude"), sep = ",")
traffic_sf$Latitude <- as.numeric(gsub("[()]", "", traffic_sf$Latitude))
traffic_sf$Longitude <- as.numeric(gsub("[()]", "", traffic_sf$Longitude))
traffic_ppp <- as.ppp(traffic_sf)
traffic_sf <- st_transform(traffic_sf, crs = 3435)
boundary <- st_transform(boundary, crs = st_crs(traffic_sf))
traffic_ppp <- as.ppp(traffic_sf)
boundary_owin <- as.owin(boundary)
traffic_ppp <- ppp(x = traffic_sf$Longitude, y = traffic_sf$Latitude,
window = boundary_owin)
kde_result <- density.ppp(traffic_ppp, sigma = 500)
kde_raster <- raster(kde_result)
# Adding KDE layer to the map
tmap_mode("view")
tm_shape(kde_raster) +
tm_raster(alpha = 0.5, palette = "-RdYlBu") +
tm_layout(title = "Kernel Density Estimate of Traffic in Chicago")
# load libraries
library(raster)
library(sf)
library(dplyr)
library(terra)
library(tmap)
library(data.table)
library(tidyverse)
library(sp)
library(spatstat)
# load data
traffic <- read_csv("traffic.csv", show_col_types = FALSE)
boundary <- st_read("boundaries.geojson")
# convert traffic data spatially
traffic_sf <- st_as_sf(traffic, coords = c("Longitude", "Latitude"), crs = 4326)
# ensure both are the same CRS
boundary <- st_transform(boundary, st_crs(traffic_sf))
# filter useless stuff
boundary <- boundary %>%
select(-area, -perimeter, -comarea_id, -comarea)
# Basic plot of traffic data on the boundary map
tmap_mode("view")
chitraffic <- tm_shape(boundary) + tm_borders(alpha = 0.4) +
tm_shape(traffic_sf) + tm_dots(size = 0.01, col="black") +
tm_layout(title="Average Daily Traffic Count in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
chitraffic
traffic_sf <- traffic_sf %>%
st_intersection(boundary)
traffic_sf <- traffic_sf %>%
separate(Location, into = c("Latitude", "Longitude"), sep = ",")
traffic_sf$Latitude <- as.numeric(traffic_sf$Latitude)
traffic_sf$Longitude <- as.numeric(traffic_sf$Longitude)
traffic_sf$Latitude <- as.numeric(gsub("[()]", "", traffic_sf$Latitude))
traffic_sf$Longitude <- as.numeric(gsub("[()]", "", traffic_sf$Longitude))
traffic_sf <- st_transform(traffic_sf, crs = 3435)
boundary <- st_transform(boundary, crs = st_crs(traffic_sf))
traffic_ppp <- as.ppp(traffic_sf)
boundary_owin <- as.owin(boundary)
traffic_ppp <- ppp(x = traffic_sf$Longitude, y = traffic_sf$Latitude,
window = boundary_owin)
kde_result <- density.ppp(traffic_ppp, sigma = 500)
kde_raster <- raster(kde_result)
# Adding KDE layer to the map
tmap_mode("view")
tm_shape(kde_raster) +
tm_raster(alpha = 0.5, palette = "-RdYlBu") +
tm_layout(title = "Kernel Density Estimate of Traffic in Chicago")
traffic_ppp <- as.ppp(traffic_sf)
boundary_owin <- as.owin(boundary)
traffic_ppp <- ppp(x = traffic_sf$Longitude, y = traffic_sf$Latitude,
window = boundary_owin)
kde_result <- density.ppp(traffic_ppp, sigma = 2000)
kde_raster <- raster(kde_result)
# Adding KDE layer to the map
tmap_mode("view")
tm_shape(kde_raster) +
tm_raster(alpha = 0.5, palette = "-RdYlBu") +
tm_layout(title = "Kernel Density Estimate of Traffic in Chicago")
traffic_sf <- st_transform(traffic_sf, crs = 3435)
boundary <- st_transform(boundary, crs = st_crs(traffic_sf))
traffic_ppp <- as.ppp(traffic_sf)
boundary_owin <- as.owin(boundary)
traffic_ppp <- ppp(x = traffic_sf$Longitude, y = traffic_sf$Latitude,
window = boundary_owin)
kde_result <- density.ppp(traffic_ppp, sigma = 2000)
kde_raster <- raster(kde_result)
crs(traffic_sf)
crs(kde_raster) <- crs(traffic_sf)
# Adding KDE layer to the map
tmap_mode("view")
tm_shape(kde_raster) +
tm_raster(alpha = 0.5, palette = "-RdYlBu") +
tm_layout(title = "Kernel Density Estimate of Traffic in Chicago")
traffic_sf <- traffic_sf %>%
st_intersection(boundary)
traffic_sf <- traffic_sf %>%
separate(Location, into = c("Latitude", "Longitude"), sep = ",")
traffic_sf$Latitude <- as.numeric(gsub("[()]", "", traffic_sf$Latitude))
traffic_sf$Longitude <- as.numeric(gsub("[()]", "", traffic_sf$Longitude))
traffic_sf <- st_transform(traffic_sf, crs = 3435)
boundary <- st_transform(boundary, crs = st_crs(traffic_sf))
traffic_ppp <- as.ppp(traffic_sf)
boundary_owin <- as.owin(boundary)
traffic_ppp <- ppp(x = traffic_sf$Longitude, y = traffic_sf$Latitude,
window = boundary_owin)
kde_result <- density.ppp(traffic_ppp, sigma = 500)
kde_raster <- raster(kde_result)
# load libraries
library(raster)
library(sf)
library(dplyr)
library(terra)
library(tmap)
library(data.table)
library(tidyverse)
library(sp)
library(spatstat)
# load data
traffic <- read_csv("traffic.csv", show_col_types = FALSE)
boundary <- st_read("boundaries.geojson")
# convert traffic data spatially
traffic_sf <- st_as_sf(traffic, coords = c("Longitude", "Latitude"), crs = 4326)
# ensure both are the same CRS
boundary <- st_transform(boundary, st_crs(traffic_sf))
# filter useless stuff
boundary <- boundary %>%
select(-area, -perimeter, -comarea_id, -comarea)
# Basic plot of traffic data on the boundary map
tmap_mode("view")
chitraffic <- tm_shape(boundary) + tm_borders(alpha = 0.4) +
tm_shape(traffic_sf) + tm_dots(size = 0.01, col="black") +
tm_layout(title="Average Daily Traffic Count in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
chitraffic
traffic_sf <- traffic_sf %>%
st_intersection(boundary)
traffic_sf <- traffic_sf %>%
separate(Location, into = c("Latitude", "Longitude"), sep = ",")
traffic_sf$Latitude <- as.numeric(traffic_sf$Latitude)
traffic_sf$Longitude <- as.numeric(traffic_sf$Longitude)
traffic_sf$Latitude <- as.numeric(gsub("[()]", "", traffic_sf$Latitude))
traffic_sf$Longitude <- as.numeric(gsub("[()]", "", traffic_sf$Longitude))
traffic_sf <- st_transform(traffic_sf, crs = 3435)
boundary <- st_transform(boundary, crs = st_crs(traffic_sf))
traffic_ppp <- as.ppp(traffic_sf)
boundary_owin <- as.owin(boundary)
traffic_ppp <- ppp(x = traffic_sf$Longitude, y = traffic_sf$Latitude,
window = boundary_owin)
kde_result <- density.ppp(traffic_ppp, sigma = 500)
kde_raster <- raster(kde_result)
crs(traffic_sf)
crs(kde_raster) <- crs(traffic_sf)
# Adding KDE layer to the map
tmap_mode("view")
tm_shape(kde_raster) +
tm_raster(alpha = 0.5, palette = "-RdYlBu") +
tm_layout(title = "Kernel Density Estimate of Traffic in Chicago")
library(sf)
library(tmap)
library(spatstat)
library(terra)
library(raster)
library(dplyr)
library(tidyverse)
library(tmap)
library(sp)
# load data
pts <- st_read("abb.gpkg")
setwd("~/GitHub/ggis224/assignment-4")
# load data
pts <- st_read("abb.gpkg")
polys <- st_read("sa2.gpkg")
tm_shape(polys) +
tm_polygons() +
tm_shape(pts) +
tm_dots()
pts.ppp <- pts$geometry %>%
as("Spatial") %>% # we need to convert to sp as a bridge to spatstat
as.ppp()          # and this is what we need maptools for...
# load libraries
library(raster)
library(sf)
library(dplyr)
library(terra)
library(tmap)
library(data.table)
library(tidyverse)
library(sp)
library(spatstat)
# load data
traffic <- read_csv("traffic.csv", show_col_types = FALSE)
boundary <- st_read("boundaries.geojson")
# convert traffic data spatially
traffic_sf <- st_as_sf(traffic, coords = c("Longitude", "Latitude"), crs = 4326)
# ensure both are the same CRS
boundary <- st_transform(boundary, st_crs(traffic_sf))
# filter unimportant columns
boundary <- boundary %>%
select(-area, -perimeter, -comarea_id, -comarea)
# Basic plot of traffic data on the boundary map
tmap_mode("view")
chitraffic <- tm_shape(boundary) + tm_borders(alpha = 0.4) +
tm_shape(traffic_sf) + tm_dots(size = 0.01, col="black", title="") +
tm_layout(title="Average Daily Traffic Count in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
chitraffic
# Basic plot of traffic data on the boundary map
tmap_mode("view")
chitraffic <- tm_shape(boundary) + tm_borders(alpha = 0.4) +
tm_shape(traffic_sf) + tm_dots(size = 0.01, col="black", title="average traffic") +
tm_layout(title="Average Daily Traffic Count in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
chitraffic
# convert traffic data spatially
traffic <- st_as_sf(traffic, coords = c("Longitude", "Latitude"), crs = 4326)
# ensure both are the same CRS
boundary <- st_transform(boundary, st_crs(traffic_sf))
# load data
traffic <- read_csv("traffic.csv", show_col_types = FALSE)
boundary <- st_read("boundaries.geojson")
# convert traffic data spatially
traffic <- st_as_sf(traffic, coords = c("Longitude", "Latitude"), crs = 4326)
# ensure both are the same CRS
boundary <- st_transform(boundary, st_crs(traffic_sf))
# filter unimportant columns
boundary <- boundary %>%
select(-area, -perimeter, -comarea_id, -comarea)
boundary
# Basic plot of traffic data on the boundary map
tmap_mode("view")
chitraffic <- tm_shape(boundary) + tm_borders(alpha = 0.4) +
tm_shape(traffic) + tm_dots(size = 0.01, col="black", title="average traffic") +
tm_layout(title="Average Daily Traffic Count in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
chitraffic
View(traffic)
tm_shape(boundary) + tm_borders() +
tm_shape(traffic) + tm_dots(col="Total Passing Vehicle Volume", size = 0.3, title="total passing vehicles")
tm_shape(boundary) + tm_borders() +
tm_shape(traffic) + tm_dots(col="Total Passing Vehicle Volume", size = 0.1, title="total passing vehicles")
tm_shape(boundary) + tm_borders() +
tm_shape(traffic) + tm_dots(col="Total Passing Vehicle Volume", size = 0.01, title="total passing vehicles")
tm_shape(boundary) + tm_borders() +
tm_shape(traffic) + tm_dots(col="Total Passing Vehicle Volume", size = 0.05, title="total passing vehicles")
tm_shape(boundary) + tm_borders() +
tm_shape(traffic) + tm_dots(col="Total Passing Vehicle Volume", size = 0.1, title="total passing vehicles")
# Basic plot of traffic data on the boundary map
chitraffic <- tm_shape(boundary) + tm_borders(alpha = 0.4) +
tm_shape(traffic) + tm_dots(size = 0.01, col="black", title="average traffic") +
tm_layout(title="Average Daily Traffic Count in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
chitraffic
