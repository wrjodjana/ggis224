knitr::opts_chunk$set(echo = TRUE)
tmap_mode("view")
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(tmap)
library(leaflet)
library(data.table)
library(tidyverse)
LAcrime <- fread("LA-data/LAPD2015_Violent.csv")
head(LAcrime)
unique(LAcrime$`Crime Code Description`)
LAcrime.df <- as.data.frame(LAcrime)
s1 <- subset(LAcrime.df, LAcrime.df$`Crime Code Description`=="CRIMINAL HOMICIDE") # base r subset
LAcrime.hom <- rbind(s1)
head(s1)
write.csv(LAcrime.hom,"LAcrime_hom.csv")
glimpse(LAcrime.hom[,c("longitude","latitude")])
str(LAcrime.hom[,c("longitude", "latitude")])
LAcrime.hom$latitude <- as.numeric(LAcrime.hom$latitude)
LAcrime.hom$longitude <- as.numeric(LAcrime.hom$longitude)
LAcrime.hom.na <- subset(LAcrime.hom, is.na(LAcrime.hom[,c("longitude", "latitude")]))
glimpse(LAcrime.hom.na) # observations
LAcrime.hom2 <- na.omit(LAcrime.hom[,c("DR Number","longitude", "latitude")])
str(LAcrime.hom2)
LAcrime.pts <- st_as_sf(LAcrime.hom2, coords = c("longitude","latitude"), crs = 4326)
plot(LAcrime.pts)
LAcrimes <- LAcrime.pts
LAtracts <- st_read("LA-data/LAC_Shape.shp")
tmap_mode("plot")
## 1st layer (gets plotted first)
LAptspolygons <- tm_shape(LAtracts) + tm_borders(alpha = 0.4) +
## 2nd layer (overlay)
tm_shape(LAcrime.pts) + tm_dots(size = 0.1, col="red") +
## add title
tm_layout(title="Los Angeles Homicide per Tract",
title.size = 0.65,
title.position=c("left", "bottom"),
title.fontface = "bold") +
# add scalebar
tm_scale_bar(breaks = c(0, 5, 10),
text.size = 0.8,
width = 1,             # Adjusts the width of bar segments
position = c("left", "bottom"),
lwd = 1.5,             # Adjust line width for visibility
color.dark = "red",   # Change dark color
color.light = "lightcoral")  # Change light color
LAptspolygons
CRS.new <- st_crs(LAtracts)
LAcrimes <- st_transform(LAcrimes, CRS.new)
crime_in_tract <- st_join(LAcrimes, LAtracts, join = st_within)
glimpse(crime_in_tract)
crime_tract_count <- as.data.frame(table(crime_in_tract$TRACTCE10))
glimpse(crime_tract_count)
names(crime_tract_count) <- c("TRACTCE10","CrimeCt")
glimpse(crime_tract_count)
LAtracts_new <- merge(LAtracts, crime_tract_count, by="TRACTCE10")
glimpse(LAtracts_new)
tmap_mode("view")
tm_shape(LAtracts_new) + tm_fill("CrimeCt", n=4, pal = "BuPu", title="LA Homicides in 2015")
NYcrime <- fread("NYC-data/NYPD2015_Violent.csv")
head(NYcrime)
unique(NYcrime$`OFNS_DESC`)
NYcrime.hom <- NYcrime %>%
filter(`OFNS_DESC` == "HOMICIDE-NEGLIGENT-VEHICLE" | `OFNS_DESC` == "MURDER & NON-NEGL. MANSLAUGHTER")
head(NYcrime.hom)
write.csv(NYcrime.hom, "NYcrime_hom.csv")
glimpse(NYcrime.hom[,c("Longitude","Latitude")])
str(NYcrime.hom[,c("Longitude", "Latitude")])
NYcrime.hom$Latitude <- as.numeric(NYcrime.hom$Latitude)
NYcrime.hom$Longitude <- as.numeric(NYcrime.hom$Longitude)
NYcrime.hom2 <- na.omit(NYcrime.hom[,c("CMPLNT_NUM","Longitude", "Latitude")])
str(NYcrime.hom2)
NYcrime.pts <- st_as_sf(NYcrime.hom2, coords = c("Longitude","Latitude"), crs = 4326)
plot(NYcrime.pts)
NYcrimes <- NYcrime.pts
NYtracts <- st_read("NYC-data/NYC_Shape.shp")
tmap_mode("plot")
NYptspolygons <- tm_shape(NYtracts) + tm_borders(alpha = 0.4) +
## 2nd layer (overlay)
tm_shape(NYcrime.pts) + tm_dots(size = 0.1, col="blue", title="Homicides") +
## add title
tm_layout(title="New York City Homicide per Tract",
title.size = 0.75,
title.position=c("left", "top"),
title.fontface = "bold",
legend.position=c("right", "bottom"), legend.bg.color = "white", legend.title.size=1, legend.text.size=0.8) +
# add scalebar
tm_scale_bar(breaks = c(0, 5, 10),
width = 1,           # Adjusts the width of bar segments
position = c("left", "top"),
text.size = 0.8,
lwd = 1.5,            # Adjust line width for visibility
color.dark = "blue",   # Change dark color
color.light = "lightblue")  # Change light color
NYptspolygons
tmap_mode("plot")
NYptspolygons <- tm_shape(NYtracts) + tm_borders(alpha = 0.4) +
## 2nd layer (overlay)
tm_shape(NYcrime.pts) + tm_dots(size = 0.1, col="blue", title="Homicides") +
## add title
tm_layout(title="New York City Homicide per Tract",
title.size = 0.75,
title.position=c("left", "top"),
title.fontface = "bold",
legend.position=c("right", "bottom"), legend.bg.color = "black", legend.title.size=1, legend.text.size=0.8) +
# add scalebar
tm_scale_bar(breaks = c(0, 5, 10),
width = 1,           # Adjusts the width of bar segments
position = c("left", "top"),
text.size = 0.8,
lwd = 1.5,            # Adjust line width for visibility
color.dark = "blue",   # Change dark color
color.light = "lightblue")  # Change light color
NYptspolygons
tmap_mode("plot")
NYptspolygons <- tm_shape(NYtracts) + tm_borders(alpha = 0.4, title="Number of Homicides") +
## 2nd layer (overlay)
tm_shape(NYcrime.pts) + tm_dots(size = 0.1, col="blue", title="Homicides") +
## add title
tm_layout(title="New York City Homicide per Tract",
title.size = 0.75,
title.position=c("left", "top"),
title.fontface = "bold",
legend.position=c("right", "bottom"), legend.bg.color = "black", legend.title.size=1, legend.text.size=0.8) +
# add scalebar
tm_scale_bar(breaks = c(0, 5, 10),
width = 1,           # Adjusts the width of bar segments
position = c("left", "top"),
text.size = 0.8,
lwd = 1.5,            # Adjust line width for visibility
color.dark = "blue",   # Change dark color
color.light = "lightblue")  # Change light color
tmap_mode("plot")
NYptspolygons <- tm_shape(NYtracts) + tm_borders(alpha = 0.4) +
## 2nd layer (overlay)
tm_shape(NYcrime.pts) + tm_dots(size = 0.1, col="blue", title="Homicides") +
## add title
tm_layout(title="New York City Homicide per Tract",
title.size = 0.75,
title.position=c("left", "top"),
title.fontface = "bold",
legend.position=c("right", "bottom"), legend.bg.color = "black", legend.title.size=1, legend.text.size=0.8) +
# add scalebar
tm_scale_bar(breaks = c(0, 5, 10),
width = 1,           # Adjusts the width of bar segments
position = c("left", "top"),
text.size = 0.8,
lwd = 1.5,            # Adjust line width for visibility
color.dark = "blue",   # Change dark color
color.light = "lightblue")  # Change light color
NYptspolygons
tmap_mode("plot")
NYptspolygons <- tm_shape(NYtracts) + tm_borders(alpha = 0.4) +
## 2nd layer (overlay)
tm_shape(NYcrime.pts) + tm_dots(size = 0.1, col="blue", title="Homicides") +
## add title
tm_layout(title="New York City Homicide per Tract",
title.size = 0.75,
title.position=c("left", "top"),
title.fontface = "bold") +
# add scalebar
tm_scale_bar(breaks = c(0, 5, 10),
width = 1,
position = c("left", "top"),
text.size = 0.8,
lwd = 1.5,
color.dark = "blue",
color.light = "lightblue") +
# add legend
tm_layout(legend.position=c("right", "bottom"), legend.bg.color = "white", legend.title.size=1, legend.text.size=0.8)
NYptspolygons
tmap_mode("plot")
NYptspolygons <- tm_shape(NYtracts) + tm_borders(alpha = 0.4) +
## 2nd layer (overlay)
tm_shape(NYcrime.pts) + tm_dots(size = 0.1, col="blue", title="Homicides") +
## add title
tm_layout(title="New York City Homicide per Tract",
title.size = 0.75,
title.position=c("left", "top"),
title.fontface = "bold") +
# add scalebar
tm_scale_bar(breaks = c(0, 5, 10),
width = 1,
position = c("left", "top"),
text.size = 0.8,
lwd = 1.5,
color.dark = "blue",
color.light = "lightblue") +
# add legend
tm_layout(legend.position=c("left", "bottom"), legend.bg.color = "white", legend.title.size=1, legend.text.size=0.8)
NYptspolygons
tmap_mode("plot")
NYptspolygons <- tm_shape(NYtracts) + tm_borders(alpha = 0.4) +
## 2nd layer (overlay)
tm_shape(NYcrime.pts) + tm_dots(size = 0.1, col="blue", title="Homicides") +
## add title
tm_layout(title="New York City Homicide per Tract",
title.size = 0.75,
title.position=c("left", "top"),
title.fontface = "bold") +
# add scalebar
tm_scale_bar(breaks = c(0, 5, 10),
width = 1,
position = c("left", "top"),
text.size = 0.8,
lwd = 1.5,
color.dark = "blue",
color.light = "lightblue") +
# add legend
tm_layout(legend.position=c("left", "bottom"), legend.bg.color = "black", legend.title.size=1, legend.text.size=0.8)
NYptspolygons
install.packages("sp")
install.packages("sp")
# load libraries
library(raster)
library(sf)
library(dplyr)
library(terra)
library(tmap)
library(data.table)
library(tidyverse)
library(sp)
library(spatstat)
# load data
traffic <- read_csv("traffic.csv", show_col_types = FALSE)
boundary <- st_read("boundaries.geojson")
# convert traffic data spatially
traffic_sf <- st_as_sf(traffic, coords = c("Longitude", "Latitude"), crs = 4326)
# ensure both are the same CRS
boundary <- st_transform(boundary, st_crs(traffic_sf))
# filter useless stuff
boundary <- boundary %>%
select(-area, -perimeter, -comarea_id, -comarea)
# Basic plot of traffic data on the boundary map
tmap_mode("view")
chitraffic <- tm_shape(boundary) + tm_borders(alpha = 0.4) +
tm_shape(traffic_sf) + tm_dots(size = 0.01, col="black") +
tm_layout(title="Average Daily Traffic Count in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
chitraffic
# Transform the CRS to a suitable projected system (e.g., UTM)
traffic_sf_projected <- st_transform(traffic_sf, crs = 32616) # UTM zone 16N, change as per your region
boundary_projected <- st_transform(boundary, st_crs(traffic_sf_projected))
# Define the observation window using the transformed boundary
owin_projected <- as.owin(boundary_projected)
# Convert the projected traffic_sf to ppp
traffic_ppp <- as.ppp(st_coordinates(traffic_sf_projected), W = owin_projected)
# Perform Intensity Analysis
traffic_intensity <- density(traffic_ppp, sigma = 0.01)
# Convert the density to a raster
traffic_density_raster <- raster(traffic_intensity)
# Transform the raster back to the original CRS (geographic)
traffic_density_raster_geo <- projectRaster(traffic_density_raster, crs = st_crs(traffic_sf))
crs(traffic_density_raster)
# Transform the CRS to a suitable projected system (e.g., UTM)
traffic_sf_projected <- st_transform(traffic_sf, crs = 32616) # UTM zone 16N, change as per your region
boundary_projected <- st_transform(boundary, st_crs(traffic_sf_projected))
# Define the observation window using the transformed boundary
owin_projected <- as.owin(boundary_projected)
# Convert the projected traffic_sf to ppp
traffic_ppp <- as.ppp(st_coordinates(traffic_sf_projected), W = owin_projected)
# Perform Intensity Analysis
traffic_intensity <- density(traffic_ppp, sigma = 0.01)
# Convert the density to a raster
traffic_density_raster <- raster(traffic_intensity)
crs(traffic_density_raster) <- CRS("32616")
# Transform the CRS to a suitable projected system (e.g., UTM)
traffic_sf_projected <- st_transform(traffic_sf, crs = 32616) # UTM zone 16N, change as per your region
boundary_projected <- st_transform(boundary, st_crs(traffic_sf_projected))
# Define the observation window using the transformed boundary
owin_projected <- as.owin(boundary_projected)
# Convert the projected traffic_sf to ppp
traffic_ppp <- as.ppp(st_coordinates(traffic_sf_projected), W = owin_projected)
# Perform Intensity Analysis
traffic_intensity <- density(traffic_ppp, sigma = 0.01)
# Convert the density to a raster
traffic_density_raster <- raster(traffic_intensity)
crs(traffic_density_raster) <- CRS(4326)
# Transform the CRS to a suitable projected system (e.g., UTM)
traffic_sf_projected <- st_transform(traffic_sf, crs = 32616) # UTM zone 16N, change as per your region
boundary_projected <- st_transform(boundary, st_crs(traffic_sf_projected))
# Define the observation window using the transformed boundary
owin_projected <- as.owin(boundary_projected)
# Convert the projected traffic_sf to ppp
traffic_ppp <- as.ppp(st_coordinates(traffic_sf_projected), W = owin_projected)
# Perform Intensity Analysis
traffic_intensity <- density(traffic_ppp, sigma = 0.01)
# Convert the density to a raster
traffic_density_raster <- raster(traffic_intensity)
crs(traffic_density_raster) <- CRS(32616)
# Transform the CRS to a suitable projected system (e.g., UTM)
traffic_sf_projected <- st_transform(traffic_sf, crs = 32616) # UTM zone 16N, change as per your region
boundary_projected <- st_transform(boundary, st_crs(traffic_sf_projected))
# Define the observation window using the transformed boundary
owin_projected <- as.owin(boundary_projected)
# Convert the projected traffic_sf to ppp
traffic_ppp <- as.ppp(st_coordinates(traffic_sf_projected), W = owin_projected)
# Perform Intensity Analysis
traffic_intensity <- density(traffic_ppp, sigma = 0.01)
# Convert the density to a raster
traffic_density_raster <- raster(traffic_intensity)
crs(traffic_density_raster) <- CRS("32616")
# Transform the CRS to a suitable projected system (e.g., UTM)
traffic_sf_projected <- st_transform(traffic_sf, crs = 32616) # UTM zone 16N, change as per your region
boundary_projected <- st_transform(boundary, st_crs(traffic_sf_projected))
# Define the observation window using the transformed boundary
owin_projected <- as.owin(boundary_projected)
# Convert the projected traffic_sf to ppp
traffic_ppp <- as.ppp(st_coordinates(traffic_sf_projected), W = owin_projected)
# Perform Intensity Analysis
traffic_intensity <- density(traffic_ppp, sigma = 0.01)
# Convert the density to a raster
traffic_density_raster <- raster(traffic_intensity)
crs(traffic_density_raster) <- CRS(32616)
# Transform the CRS to a suitable projected system (e.g., UTM)
traffic_sf_projected <- st_transform(traffic_sf, crs = 32616) # UTM zone 16N, change as per your region
boundary_projected <- st_transform(boundary, st_crs(traffic_sf_projected))
# Define the observation window using the transformed boundary
owin_projected <- as.owin(boundary_projected)
# Convert the projected traffic_sf to ppp
traffic_ppp <- as.ppp(st_coordinates(traffic_sf_projected), W = owin_projected)
# Perform Intensity Analysis
traffic_intensity <- density(traffic_ppp, sigma = 0.01)
# Convert the density to a raster
traffic_density_raster <- raster(traffic_intensity)
crs(traffic_density_raster) <- CRS("+init=EPSG:32616")
# Transform the raster back to the original CRS (geographic)
traffic_density_raster_geo <- projectRaster(traffic_density_raster, crs = st_crs(traffic_sf))
# Transform the CRS to a suitable projected system (e.g., UTM)
traffic_sf_projected <- st_transform(traffic_sf, crs = 32616) # UTM zone 16N, change as per your region
boundary_projected <- st_transform(boundary, st_crs(traffic_sf_projected))
# Define the observation window using the transformed boundary
owin_projected <- as.owin(boundary_projected)
# Convert the projected traffic_sf to ppp
traffic_ppp <- as.ppp(st_coordinates(traffic_sf_projected), W = owin_projected)
# Perform Intensity Analysis
traffic_intensity <- density(traffic_ppp, sigma = 0.01)
# Convert the density to a raster
traffic_density_raster <- raster(traffic_intensity)
crs(traffic_density_raster) <- CRS("+init=EPSG:32616")
# Transform the raster back to the original CRS (geographic)
traffic_density_raster_geo <- projectRaster(traffic_density_raster, crs = CRS("+init=EPSG:4326"))
# Convert the raster to an sf object for visualization
traffic_density_sf <- st_as_sf(traffic_density_raster_geo, coords = c("Longitude", "Latitude"), crs = 4326, na.rm = TRUE)
# Transform the CRS to a suitable projected system (e.g., UTM)
traffic_sf_projected <- st_transform(traffic_sf, crs = 32616) # UTM zone 16N, change as per your region
boundary_projected <- st_transform(boundary, st_crs(traffic_sf_projected))
# Define the observation window using the transformed boundary
owin_projected <- as.owin(boundary_projected)
# Convert the projected traffic_sf to ppp
traffic_ppp <- as.ppp(st_coordinates(traffic_sf_projected), W = owin_projected)
# Perform Intensity Analysis
traffic_intensity <- density(traffic_ppp, sigma = 0.01)
# Convert the density to a raster
traffic_density_raster <- raster(traffic_intensity)
crs(traffic_density_raster) <- CRS("+init=EPSG:32616")
# Transform the raster back to the original CRS (geographic)
traffic_density_raster_geo <- projectRaster(traffic_density_raster, crs = CRS("+init=EPSG:4326"))
# Convert the raster to a SpatialPixelsDataFrame
traffic_density_spdf <- as(traffic_density_raster_geo, "SpatialPixelsDataFrame")
# Convert the SpatialPixelsDataFrame to an sf object
traffic_density_sf <- st_as_sf(traffic_density_spdf)
# Convert the raster to an sf object for visualization
traffic_density_sf <- st_as_sf(traffic_density_raster_geo, coords = c("Longitude", "Latitude"), crs = 4326, na.rm = TRUE)
# Transform the CRS to a suitable projected system (e.g., UTM)
traffic_sf_projected <- st_transform(traffic_sf, crs = 32616) # UTM zone 16N, change as per your region
boundary_projected <- st_transform(boundary, st_crs(traffic_sf_projected))
# Define the observation window using the transformed boundary
owin_projected <- as.owin(boundary_projected)
# Convert the projected traffic_sf to ppp
traffic_ppp <- as.ppp(st_coordinates(traffic_sf_projected), W = owin_projected)
# Perform Intensity Analysis
traffic_intensity <- density(traffic_ppp, sigma = 0.01)
# Convert the density to a raster
traffic_density_raster <- raster(traffic_intensity)
crs(traffic_density_raster) <- CRS("+init=EPSG:32616")
# Transform the raster back to the original CRS (geographic)
traffic_density_raster_geo <- projectRaster(traffic_density_raster, crs = CRS("+init=EPSG:4326"))
# Convert the raster to a SpatialPointsDataFrame
traffic_density_spdf <- as(traffic_density_raster_geo, "SpatialPointsDataFrame")
# Convert the SpatialPixelsDataFrame to an sf object
traffic_density_sf <- st_as_sf(traffic_density_spdf)
# Convert the raster to an sf object for visualization
traffic_density_sf <- st_as_sf(traffic_density_raster_geo, coords = c("Longitude", "Latitude"), crs = 4326, na.rm = TRUE)
# Transform the CRS to a suitable projected system (e.g., UTM)
traffic_sf_projected <- st_transform(traffic_sf, crs = 32616) # UTM zone 16N, change as per your region
boundary_projected <- st_transform(boundary, st_crs(traffic_sf_projected))
# Define the observation window using the transformed boundary
owin_projected <- as.owin(boundary_projected)
# Convert the projected traffic_sf to ppp
traffic_ppp <- as.ppp(st_coordinates(traffic_sf_projected), W = owin_projected)
# Perform Intensity Analysis
traffic_intensity <- density(traffic_ppp, sigma = 0.01)
# Convert the density to a raster
traffic_density_raster <- raster(traffic_intensity)
crs(traffic_density_raster) <- CRS("+init=EPSG:32616")
# Transform the raster back to the original CRS (geographic)
traffic_density_raster_geo <- projectRaster(traffic_density_raster, crs = CRS("+init=EPSG:4326"))
# Convert the raster to a SpatialPointsDataFrame
traffic_density_spdf <- as(traffic_density_raster_geo, "SpatialPointsDataFrame")
# Convert the SpatialPixelsDataFrame to an sf object
traffic_density_sf <- st_as_sf(traffic_density_spdf)
# Adjust tmap mode for plotting
tmap_mode("view")
# Create the final map
final_map <- tm_shape(boundary) + tm_borders(alpha = 0.4) +
tm_shape(traffic_density_raster_sf) +
tm_raster("layer", title = "Traffic Density", style = "cont", palette = "-RdYlBu") +
tm_layout(title = "Average Daily Traffic Density in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
# Adjust tmap mode for plotting
tmap_mode("view")
# Create the final map
final_map <- tm_shape(boundary) + tm_borders(alpha = 0.4) +
tm_shape(traffic_density_sf) +
tm_raster("layer", title = "Traffic Density", style = "cont", palette = "-RdYlBu") +
tm_layout(title = "Average Daily Traffic Density in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
final_map
# Adjust tmap mode for plotting
tmap_mode("view")
# Create the final map
final_map <- tm_shape(boundary) + tm_borders(alpha = 0.4) +
tm_shape(traffic_density_sf) +
tm_symbols(col = "layer", title = "Traffic Density", palette = "-RdYlBu") + # Use tm_symbols
tm_layout(title = "Average Daily Traffic Density in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
# Adjust tmap mode for plotting
tmap_mode("view")
# Create the final map
final_map <- tm_shape(boundary) + tm_borders(alpha = 0.4) +
tm_shape(traffic_density_sf) +
tm_symbols(col = "layer", palette = "-RdYlBu") +  # Adjusted tm_symbols
tm_layout(title = "Average Daily Traffic Density in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom")) +
tm_legend(title = "Traffic Density")  # Add legend for traffic density
final_map
# Basic plot of traffic data on the boundary map
tmap_mode("view")
chitraffic <- tm_shape(boundary) + tm_borders(alpha = 0.4) +
tm_shape(traffic_sf) + tm_dots(size = 0.01, col="black") +
tm_layout(title="Average Daily Traffic Count in Chicago",
title.size = 0.75,
title.fontface = "bold") +
tm_scale_bar(position = c("left", "bottom"))
chitraffic
