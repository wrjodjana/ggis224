# installing packages
install.packages("sf")
install.packages("dplyr")
install.packages("terra")
install.packages("spData")
# load libraries
library(sf)
library(dplyr)
library(terra)
library(spData)
# load data
data(us_states)
data(us_states_df)
setwd("~/Documents/R/GGIS 224 (Environmental Data Science)/classwork_12_sept")
# set directory
setwd("~/Documents/R/GGIS 224 (Environmental Data Science)/classwork_12_sept")
# installing packages
install.packages("sf")
install.packages("dplyr")
install.packages("terra")
install.packages("spData")
# load libraries
library(sf)
library(dplyr)
library(terra)
library(spData)
install.packages("dplyr")
install.packages("tmshape")
library(tmshape)
install.packages("tmshape")
library(sf)
library(dplyr)
library(terra)
library(spData)
library(tmshape)
plot(nz_height)
install.packages("tmap")
library(tmap)
tm_shape(nz) + tm_fill(alpha = 0.5) + tm_borders() +
tm_shape(tm_height) + tm_bubbles("elevation", n = 5)
tm_shape(nz) + tm_fill(alpha = 0.5) + tm_borders() +
tm_shape(nz_height) + tm_bubbles("elevation", n = 5)
tm_shape(nz) + tm_fill(alpha = 0.5) + tm_borders() +
tm_shape(nz_height) + tm_bubbles("elevation", size = 0.2)
canterbury_height <- nz_height[canterbury, ]
canterbury <- nz |>
filter(Name == "Canterbury")
canterbury_height <- nz_height[canterbury, ]
canterbury_height
tm_shape(nz) + tm_fill(alpha = 0.5) + tm_borders() +
tm_shape(canterbury_height) + tm_bubbles("elevation", size = 0.2)
tm_shape(canterbury) + tm_fill(alpha = 0.5) + tm_borders() +
tm_shape(canterbury_height) + tm_bubbles("elevation", size = 0.2)
tm_shape(nz) + tm_fill(alpha = 0.5) + tm_borders() +
tm_shape(canterbury_height) + tm_bubbles("elevation", size = 0.2)
tm_shape(nz) + tm_fill(alpha = 0.5) + tm_borders(alpha = 0.5) +
tm_shape(canterbury_height) + tm_bubbles("elevation", size = 0.2) +
tm_shape(nz_height) + tm_dots() +
tm_shape(canterbury_height) + tm_dots("cadetblue")
tm_shape(nz) + tm_fill(alpha = 0.5) + tm_borders(alpha = 0.5) +
tm_shape(canterbury_height) + tm_fill("cadetblue1") + tm_borders(alpha = 0.5) +
tm_shape(nz_height) + tm_dots() +
tm_shape(canterbury_height) + tm_dots("cadetblue")
tm_shape(nz) + tm_fill(alpha = 0.5) + tm_borders(alpha = 0.5) +
tm_shape(canterbury) + tm_fill("cadetblue1") + tm_borders(alpha = 0.5) +
tm_shape(nz_height) + tm_dots() +
tm_shape(canterbury_height) + tm_dots("cadetblue")
chitracts <- read_sf("chives-data.geojson")
library(tmap)
library(sf)
chitracts <- read_sf("chives-data.geojson")
st_join(nz_height, nz)
st_join(parks, chitracts)
parks <- st_read("geo_export_57b2c3bb-96b4-4b61-a693-b10a1ebb5e87.shp")
setwd("~/Documents/R/GGIS 224 (Environmental Data Science)/classwork_14sept")
st_join(parks, chitracts)
parks <- st_read("geo_export_57b2c3bb-96b4-4b61-a693-b10a1ebb5e87.shp")
plot(parks)
st_join(parks, chitracts)
chitracts <- read_sf("chives-data.geojson")
st_join(parks, chitracts)
st_join(chitracts, parks)
st_join(chitracts, parks)
install.packages("osmdata")
library(osmdata)
#View features available
available_features()
#Select options within the 'leisure' category
leisure <- available_tags("leisure")
leisure
#Create an overpass query to grab data for City
q <- getbb("Chicago") %>%  #Specify City
opq() %>% #Builds an overpass query
add_osm_feature("leisure", "park") #Specify Tags
#Query Structure
str(q)
#Returns overpass query as sf object
park <- osmdata_sf(q)
park
#Another way of doing the OSMDATA query:
#chi_parks <- getbb("Chicago") %>%
#  opq() %>%
#  add_osm_feature(key = "leisure", value = "park") %>%
#  osmdata_sf()
#Load libraries for mapping & spatial data wrangling
library(tmap)
library(sf)
#Extract just point data of parks, and rename
chiparks <- (park$osm_points)
#Confirm structure is an sf object
str(chiparks)
#Map parks as points
tm_shape(chiparks) + tm_dots()
#Read in Chicago tract level data from Assignment 1
chitracts <- read_sf("chives-data.geojson")
#Map tracts and parks to confirm they overlap
tm_shape(chitracts) + tm_fill() +
tm_shape(chiparks) + tm_dots(alpha = 0.4)
#Prepare data for a spatial data operation => Check CRS
st_crs(chiparks)
st_crs(chitracts)
#Transform to CRS of chiparks
chitracts <- st_transform(chitracts, st_crs(chiparks))
#Spatially join parks with tracts; data remains as points/parks.
#What would be another way of doing this?
pipr <- st_join(chiparks, chitracts)
head(pipr)
#Identify which column will be our Tract ID within points
head(chitracts) #geoid
#Aggregate count of parks by GEOID. What are othe ways to do this?
ptcount <- as.data.frame(table(pipr$geoid))
head(ptcount)
#Rename column fields to make for easy merging back to Tracts file
names(ptcount) <- c("geoid", "ParkCt")
head(ptcount)
#Merge count variable back to tracts
areas<- merge(chitracts, ptcount, by="geoid", all = TRUE)
head(areas)
tm_shape(areas) + tm_fill("ParkCt", style = "jenks", n=6, alpha = 0.8)
#Load data wrangling library
library(dplyr)
#Merge data to community areas as new spatial variable
ParkCom <- areas %>%
group_by(community) %>%
summarize(Parks = sum(ParkCt, na.rm = TRUE),
TotTracts = n())
#Map new spatial variable (ie. Parks)
tm_shape(ParkCom) + tm_fill("Parks", style = "jenks", n=6, alpha = 0.8)
library(tmap)
library(sf)
q <- getbb("Chicago") %>%  #Specify City
opq() %>% #Builds an overpass query
add_osm_feature("leisure", "park") #Specify Tags
parks
st_join(chitracts, parks, c("gisobjid", "geoid"))
setwd("~/Documents/R/GGIS 224 (Environmental Data Science)/discussion-2")
tm_shape(nz) + tm_fill(alpha = 0.5) + tm_borders(alpha = 0.5) +
tm_shape(canterbury) + tm_fill("cadetblue1") + tm_borders(alpha = 0.5) +
tm_shape(nz_height) + tm_dots() +
tm_shape(canterbury_height) + tm_dots("cadetblue")
library(sf)
library(dplyr)
library(terra)
library(spData)
library(tmap)
tm_shape(nz) + tm_fill(alpha = 0.5) + tm_borders(alpha = 0.5) +
tm_shape(canterbury) + tm_fill("cadetblue1") + tm_borders(alpha = 0.5) +
tm_shape(nz_height) + tm_dots() +
tm_shape(canterbury_height) + tm_dots("cadetblue")
mean(nz_height$elevation)
mean(canterbury_height$elevation)
library(sf)
library(tidyverse)
library(tmap)
setwd("/cloud/project/Parks_Exercise")
setwd("~/Documents/R/GGIS 224 (Environmental Data Science)/discussion-2")
library(sf)
library(tidyverse)
library(tmap)
setwd("/cloud/project/Parks_Exercise")
setwd("~/Documents/R/GGIS 224 (Environmental Data Science)/discussion-2")
library(sf)
library(tidyverse)
library(tmap)
chiparks <- st_read("Parks.geojson")
#Map parks as points
tm_shape(chiparks) + tm_dots()
#Read in Chicago tract level data from Assignment 1
chitracts <- st_read("/cloud/project/Assignment-1/chives-data.geojson")
setwd("~/Documents/R/GGIS 224 (Environmental Data Science)/discussion-2")
library(sf)
library(tidyverse)
library(tmap)
setwd("~/Documents/R/GGIS 224 (Environmental Data Science)/discussion-2")
chiparks <- st_read("Parks.geojson")
#Map parks as points
tm_shape(chiparks) + tm_dots()
#Read in Chicago tract level data from Assignment 1
chitracts <- st_read("~/Documents/R/GGIS 224 (Environmental Data Science)/Assignment-1/chives-data.geojson")
#Map tracts and parks to confirm they overlap
tm_shape(chitracts) + tm_fill() +
tm_shape(chiparks) + tm_dots(alpha = 0.4)
#Prepare data for a spatial data operation => Check CRS
st_crs(chiparks)
st_crs(chitracts)
#Transform to CRS of chiparks
#chitracts <- st_transform(chitracts, st_crs(chiparks))
head(chiparks)
head(chitracts)
#Spatially join parks with tracts; data remains as points/parks.
#What would be another way of doing this?
pipr <- st_join(chiparks, chitracts)
head(pipr)
#Identify which column will be our Tract ID within points
head(chitracts) #geoid
#Aggregate count of parks by GEOID. What are othe ways to do this?
ptcount <- as.data.frame(table(pipr$geoid))
head(ptcount)
#Rename column fields to make for easy merging back to Tracts file
names(ptcount) <- c("geoid", "ParkCt")
head(ptcount)
#Merge count variable back to tracts
areas<- merge(chitracts, ptcount, by="geoid", all = TRUE)
head(areas)
tm_shape(areas) + tm_fill("ParkCt", style = "jenks", n=6, alpha = 0.8)
#Load data wrangling library
library(dplyr)
#Merge data to community areas as new spatial variable
ParkCom <- areas %>%
group_by(community) %>%
summarize(Parks = sum(ParkCt, na.rm = TRUE),
TotTracts = n())
#Map new spatial variable (ie. Parks)
tm_shape(ParkCom) + tm_fill("Parks", style = "jenks",
pal = "BuPu", n=6, alpha = 0.8)
#install.packages("ggmap")
#install.packages("ggplot2")
library(ggmap)
library(ggplot2)
# retrieving roadmap of Chicago
Chi_map <- get_map(getbb("Chicago"), maptype = "roadmap")
chiparks <- st_read("Parks.geojson")
chiparks
